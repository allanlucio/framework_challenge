// Mocks generated by Mockito 5.0.16 from annotations
// in framework_challenge/test/features/fruit_shop/presentation/stores/products/products_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:framework_challenge/core/errors/failures.dart' as _i5;
import 'package:framework_challenge/features/fruit_shop/domain/entities/product_entity.dart'
    as _i6;
import 'package:framework_challenge/features/fruit_shop/domain/usecases/search_products/search_product_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [SearchProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchProductUseCase extends _i1.Mock
    implements _i3.SearchProductUseCase {
  MockSearchProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>> call(
          {String? query}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#query: query}),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.ProductEntity>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>);
  @override
  String toString() => super.toString();
}
